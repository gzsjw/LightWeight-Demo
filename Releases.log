## 迭代版本

-------------
### 初始版本 20180521

#### 特性
使用vue template webpack模板作为脚手架建立vue项目，项目在开发态能正常跑起来，能正常打包部署到服务器上

#### 技术栈
- node 8.9.1
- npm 6.0.1
- vue-cli 2.9.3
- vuejs-templates-webpack 1.3.1
- webpack 3.12.0
- vue-loader 13.7.1
- vue 2.5.16
-------------

-------------
### 版本 20180522-01

#### 特性
升级组件版本到当前最新稳定版

#### 技术栈
- vue 2.5.16
- element-ui 2.3.9
- bootstrap 4.1.1
- bootstrap-vue 2.0.0-rc.11
- 项目中的所有组件升级到最新稳定版
-------------

-------------
### 版本 20180523-01

#### 特性
使用AntDesign的Vue版实现，组件库vue-antd，演示了Table表格组件的树形数据展现；
这套组件库，从组件的功能及完整性来说，可以考虑取代element-ui;
同时，也学习了配合babel-plugin-import按需引入组件和样式的用法，见vue-antd文档中"在 vue-cli 中使用"这节的内容;

#### 技术栈
- vue-antd-ui 0.5.1
-------------

-------------
### 版本 20180529-01

#### 特性
引入Core-UI作为页面模板，示例页面：登录、组件、图标、图表、400、500、register；
登录页面基本功能完整，登录功能发起webapi调用，成功跳转到首页，失败显示错误信息；
前端服务器通过反向代理把调用请求转发给中间服务器；
使用tomcat作为中间服务器，部署spring应用，通过webapi服务提供动态信息服务，如登录、附件上传、获得用户头像；
在中间服务器上提供登录的Demo实现版本，提供模拟数据，不实际连接数据库；
图表的4个页面功能，启用了用户权限，按节点授权，有权限的节点才显示，访问权限节点需要先登录，模拟数据提供了相关的测试用例；
用户头像由用户信息上的头像路径确定，头像文件实际放在中间服务器上，由spring的default-servlet-handler提供访问服务；
中间服务器上的spring应用，提供了完整的附件上传、下载、列表、删除功能；
AntDesign的树表示例依然可用；

#### 技术栈
- coreui-free-vue-admin-template 1.0.13

#### 相关项目
MiddleWare-Demo
-------------

-------------
### 版本 20180530-02

#### 特性
引入dhtmlx-gantt，绘制甘特图；可以用前端工具开发调试打包；初步使用了该包的本地化中文显示；

#### 技术栈
- dhtmlx-gantt 5.1.0

#### dhtmlx-gantt的缺点
- 使用全局变量gantt，前端工具语法检查出错，需要“/* eslint-disable */”才能运行；
- 官方的示例“use-dhtmlxgantt-vue-js-framework-demo”，前端工具语法检查出错，不少地方需要调整写法；
- 本地化的引入有点奇怪；
- 感觉这个组件并不是很适合在主流前端环境以及ES5/ES6的规范下使用；
- 组件的宽度可以做到自适应，但高度不行，有点像element-ui，容器高度的自适应是不是不好做？
- 为何叫dhtml，是那个之前与html5竞争的产物？
- 同样，在官方的示例（同上）中，html大量使用流式布局、浮动模式、相对定位等；好像与当下H5的栅格系统、响应式、弹性盒子模型相背；
- 总的感觉：与主流前端环境并不是很适合、与主流的布局方式相距有点远、并不活跃用的人不多；

#### 相关项目
MiddleWare-Demo
-------------
